"""
This file is processed by CMake, to generate a proper sitecustomize.py module.

The sitecustomize module is automatically imported by Python when the interpreter
is initialized, allowing to adjust sys.path for our project.
For a better chance to be used, the file can be placed next to the site.py
file in the embedded python environment.

We could disable the 'import site' feature from the C/C++ code, or
only disable the usage of the user site dir, but anyway we also have the
case of the python interpreter directly run without any wrapper or option:
let's be robust and always give a priority to the local modules/packages.

.. warning::
    Be careful not doing any print in this file, as it can lead to
    an IOError(9, 'Bad file descriptor') exception when the interpreter is
    initialized from C/C++ code, making the module import fail. It also
    interfers with processes using the output of well known commands like
    "python -m site --user-site".
"""
import os
import sys
import site

IS_WIN = sys.platform.startswith('win')

# Whether we use a standalone python distribution or a virtual env that is
# linked to another python install (set at CMake configuration time)
IS_STANDALONE_PYTHON = '${EMBEDDED_PYTHON}' == 'TRUE'

SYS_PATH = sys.path

if IS_STANDALONE_PYTHON and site.ENABLE_USER_SITE:
    # When not in a virtualenv, let's remove the user site-packages dir
    # from sys.path, to try to be isolated from packages potentially already
    # installed on the system.
    # This has the same effect as running python with the -s option.
    # ... except if .pth files exist in the user site dir: in this case the
    # paths listed in these files are added in sys.path (one way to discard
    # them is to enable STRICT_PATH_ISOLATION).
    USER_SITE = site.USER_SITE
    # using a while loop because in certain contexts it can be there 2 times ...
    while USER_SITE in SYS_PATH:
        SYS_PATH.remove(USER_SITE)

# Whether to only allow sys.path to contain directories that are inside
# our local environment, ensuring a strict isolation from packages
# installed on the system.
# If enabled, any external path added with the PYTHONPATH env var will be
# discarded, as well as any external folder like the ones listed by
# .pth files that could exist for e.g. in the user site dir.
# Even if not enabled, we give a priority to directories inside the
# local env, especially to limit side effects and still be able to use
# packages installed in editable mode, or to still be able to use the
# PYTHONPATH env var for testing needs.
STRICT_PATH_ISOLATION = False

# Determine a root 'prefix' dir from which we assume our local environment starts
LOCAL_ENV_ROOT = (os.path.abspath(os.path.join(sys.prefix, '..')) if IS_WIN
                  else sys.prefix)

# Lower the priority of external directories that are in sys.path, or totally
# discard them
for p in SYS_PATH[:]:
    if not p.startswith(LOCAL_ENV_ROOT):
        SYS_PATH.remove(p)
        if not STRICT_PATH_ISOLATION:
            # we move it later in sys.path instead of removing it
            # (ensuring a priority on local modules/packages)
            SYS_PATH.append(p)

if not IS_WIN:
    # On Linux we install binaries and libs in distinct folders, and
    # the lib folder should be in the python path, especially to be able
    # to import the ISSofaPython compiled module.
    # If the python home is properly set before initializing the interpreter
    # in the C++ code, sys.prefix should be the absolute root path of the
    # python env of the project.
    LIB_DIR = os.path.join(sys.prefix, 'lib')
    if os.path.exists(os.path.join(LIB_DIR, 'ISSofaPython.so')):
        SYS_PATH.insert(0, os.path.abspath(LIB_DIR))

# Determine the project root directory
# /!\ The PROJECT_ROOT_DIR, BIN_JSON_FILE_PATH, IS_PACKAGED variables are
#     computed here but also imported and used in the sofa package.
SELF_DIR = os.path.abspath(os.path.dirname(__file__))
# Relative dir to the root of the project (when being in a build tree or
# install tree, but won't fit the packaged version)
PROJECT_ROOT_REL_DIR = '${PROJECT_ROOT_REL_DIR}'
PROJECT_ROOT_DIR = os.path.abspath(os.path.join(SELF_DIR, PROJECT_ROOT_REL_DIR))
BIN_JSON_FILE_PATH = os.path.join(PROJECT_ROOT_DIR, '.bin.json')
if not os.path.exists(BIN_JSON_FILE_PATH):
    BIN_JSON_FILE_PATH = None
IS_PACKAGED = BIN_JSON_FILE_PATH is None
if IS_PACKAGED:
    PROJECT_ROOT_DIR = LOCAL_ENV_ROOT

# Make importable some python modules or packages that are intentionally not
# copied into the local python environment of the project
ADDITIONAL_SYS_PATH_DIRS = '${ISSOFAPYTHON_ADDITIONAL_SYS_PATH_DIRS}'.split(';')
if ADDITIONAL_SYS_PATH_DIRS:
    # Now we determined the correct root dir, let's modify sys.path
    for rel_dir in ADDITIONAL_SYS_PATH_DIRS:
        SYS_PATH.insert(0, os.path.join(PROJECT_ROOT_DIR, rel_dir))
